AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >-
  Scalyr CloudWatch Logs Importer (fork)

Parameters:
  BaseUrl:
    Description: Base URL of the Scalyr API
    Type: String
    Default: 'https://www.scalyr.com'
    AllowedValues: ['https://www.scalyr.com', 'https://eu.scalyr.com']
  WriteLogsKey:
    Description: 'Use this or WriteLogsKeyEncrypted.
                  The Scalyr API key that allows write access to Scalyr logs'
    Type: String
    Default: ''
  WriteLogsKeyEncrypted:
    Description: 'Use this or WriteLogsKey.
                  The encrypted Scalyr API key that allows write access to Scalyr logs'
    Type: String
    Default: ''
  LogGroupOptions:
    Description: Valid JSON string to customise log delivery
    Type: String
    Default: '{}'
  AutoSubscribeLogGroups:
    Description: Automatically subscribe the logGroups defined in LogGroupOptions to the CloudWatch Streamer Lambda function (CloudTrail logging must be enabled for any future logGroups to be automatically subscribed)
    Type: String
    Default: false
    AllowedValues: [true, false]
  Debug:
    Description: Enable debug logging of each request
    Type: String
    Default: false
    AllowedValues: [true, false]

# BEGIN MAPPINGS  (do not change comment, publish.sh depends on this)
Mappings:
  RegionMap:
    us-east-1:
      bucket: 'abhishek-functions'
      prefix: 'cloudwatch_logs'
      version: 1.0.71
# END MAPPINGS    (do not change comment, publish.sh depends on this)

Conditions:
  WriteLogsKeyPlaintext:
    !Not [!Equals [!Ref WriteLogsKey, '']]
  WriteLogsKeyEncrypted:
    !Not [!Equals [!Ref WriteLogsKeyEncrypted, '']]

Resources:
  CloudWatchStreamerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: main.lambda_handler
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref 'AWS::Region', bucket]
        Key:
          Fn::Sub:
            - "${Prefix}/Streamer-${Version}.zip"
            - Prefix: !FindInMap [RegionMap, !Ref 'AWS::Region', prefix]
              Version: !FindInMap [RegionMap, !Ref 'AWS::Region', version]
      Timeout: 60
      Policies:
        - !Ref KMSDecryptPolicy
      Environment:
        Variables:
          BASE_URL: !Ref BaseUrl
          WRITE_LOGS_KEY:
            Fn::If: [WriteLogsKeyPlaintext, !Ref WriteLogsKey, !Ref 'AWS::NoValue']
          WRITE_LOGS_KEY_ENCRYPTED:
            Fn::If: [WriteLogsKeyEncrypted, !Ref WriteLogsKeyEncrypted, !Ref 'AWS::NoValue']
          LOG_GROUP_OPTIONS: !Ref LogGroupOptions
          DEBUG: !Ref Debug
  CloudWatchSubscriberPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:AddPermission'
              - 'lambda:RemovePermission'
              - 'logs:DescribeLogGroups'
              - 'logs:DeleteSubscriptionFilter'
              - 'logs:PutSubscriptionFilter'
            Resource: '*'
  CloudWatchSubscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: main.lambda_handler
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref 'AWS::Region', bucket]
        Key:
          Fn::Sub:
          - "${Prefix}/Subscriber-${Version}.zip"
          - Prefix: !FindInMap [RegionMap, !Ref 'AWS::Region', prefix]
            Version: !FindInMap [RegionMap, !Ref 'AWS::Region', version]
      Timeout: 300
      Policies:
        - !Ref CloudWatchSubscriberPolicy
      Events:
        LambdaTrigger:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.logs
              detail:
                eventSource:
                  - logs.amazonaws.com
                eventName:
                  - CreateLogGroup
      Environment:
        Variables:
          AUTO_SUBSCRIBE_LOG_GROUPS: !Ref AutoSubscribeLogGroups
          LOG_GROUP_OPTIONS: !Ref LogGroupOptions
          AWS_ACCOUNT_ID: !Ref 'AWS::AccountId'
          DESTINATION_ARN: !GetAtt CloudWatchStreamerFunction.Arn

  CloudWatchSubscriber:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CloudWatchSubscriberFunction.Arn
      LogGroupOptions: !Ref LogGroupOptions
      AutoSubscribeLogGroups: !Ref AutoSubscribeLogGroups
      DestinationArn: !GetAtt CloudWatchStreamerFunction.Arn
      AccountId: !Ref 'AWS::AccountId'
      Region: !Ref 'AWS::Region'
  KMSDecryptPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'

Outputs:
  CloudWatchStreamerArn:
    Description: The arn of the CloudWatch Streamer function.
    Value: !GetAtt CloudWatchStreamerFunction.Arn
  CloudWatchSubscriberArn:
    Description: The arn of the CloudWatch Subscriber function.
    Value: !GetAtt CloudWatchSubscriberFunction.Arn
